module CoursesHelper

  # disabled input for faculty
  def course_field(form, type, tag, options)
    options[:disabled] = true if current_user.faculty?
    form.send(type, tag, options).html_safe
  end

  def selected_instructor_cnet
    @selected_instructor_cnet || @db_instructor_cnet
  end

  def course_instructor
    if ci = @course.instructor
      "#{formatted_info(ci)} (#{formatted_email(ci)})"
    else
      "TBD"
    end.html_safe
  end

  def form_season
    # FIXME: Make quarter pages use year as their slug
    params[:season].try(:capitalize) || @season.try(:capitalize) ||
     Quarter.active_quarter.try(:season).capitalize
  end

  def form_year
    # FIXME: Make quarter pages use year as their slug
    # NOTE: This needs to be params[:quarter][:year] for the new / edit quarter
    # form.
    params[:year] || @year || Quarter.active_quarter.try(:year)
  end

  def edit_change_type
    @course.draft? ? "create" : "edit"
  end

  def form_preference
    @bid.new_record? ? "No preference" : @bid.preference
  end

  def formatted_title(course)
    course.title + (course.draft? ? " (Draft)" : "")
  end

  def formatted_status(course)
    course.draft? ? "Draft" : (course.published? ? "Published" : "Unpublished")
  end

  def render_syllabus(syllabus_html)
    # Produce desirable output from the html generated by TinyMCE
    out = syllabus_html

    # <h[n]>...</h[n]> => <h[n]><strong>...</strong></h[n]>
    out.gsub!(/(<h\d>)/, '\1<strong>')
    out.gsub!(/(<\/h\d>)/, '</strong>\1')

    out.html_safe
  end
end
